
TP1_Giovanna_171886.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000000ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000009a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000160  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000702  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061e  00000000  00000000  000008a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d9  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000109c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000350  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 48 00 	call	0x90	; 0x90 <main>
  78:	0c 94 4b 00 	jmp	0x96	; 0x96 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Adaptacao_Assembler>:
 #include <avr/io.h>

 .global Adaptacao_Assembler
	Adaptacao_Assembler:
		INICIO:
				ldi r17, 0x37
  80:	17 e3       	ldi	r17, 0x37	; 55
				ldi r18, 45
  82:	2d e2       	ldi	r18, 0x2D	; 45
				add r17, r18
  84:	12 0f       	add	r17, r18
				ldi r19,0b00111000
  86:	38 e3       	ldi	r19, 0x38	; 56
				ldi r20, 0x2B
  88:	4b e2       	ldi	r20, 0x2B	; 43
				add r19,r20
  8a:	34 0f       	add	r19, r20
				sub r17, r19
  8c:	13 1b       	sub	r17, r19

0000008e <LOOP>:

		LOOP:
			rjmp LOOP
  8e:	ff cf       	rjmp	.-2      	; 0x8e <LOOP>

00000090 <main>:
int main(void)
{
    /* Replace with your application code */
    while (1) 
    {
			Adaptacao_Assembler();
  90:	0e 94 40 00 	call	0x80	; 0x80 <Adaptacao_Assembler>
  94:	fd cf       	rjmp	.-6      	; 0x90 <main>

00000096 <_exit>:
  96:	f8 94       	cli

00000098 <__stop_program>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <__stop_program>
